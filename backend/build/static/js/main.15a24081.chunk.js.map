{"version":3,"sources":["containers/Home.jsx","actions/types.jsx","actions/auth.jsx","containers/Login.jsx","containers/Signup.jsx","containers/Activate.jsx","containers/ResetPassword.jsx","containers/ResetPasswordConfirm.jsx","components/NavBar.jsx","hocs/Layout.jsx","reducers/auth.jsx","reducers/index.jsx","store.jsx","App.js","index.js"],"names":["Home","to","LOGIN_SUCCESS","LOGIN_FAIL","LOAD_USER_SUCCESS","LOAD_USER_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","LOGOUT","PASSWORD_REST_FAIL","PASSWORD_REST_SUCCESS","PASSWORD_REST_CONFIRM_FAIL","PASSWORD_REST_CONFIRM_SUCCESS","url","load_user","dispatch","a","localStorage","getItem","config","headers","axios","get","res","type","payload","data","connect","state","isAuthenticated","auth","login","email","password","body","JSON","stringify","post","useState","formData","setFormData","onChange","e","target","name","value","window","location","href","className","onSubmit","preventDefault","placeholder","required","minLength","Signup","Activate","reset_password","requestSent","setRequestSent","reset_password_confirm","uid","token","new_password","re_new_password","match","params","logout","id","onClick","checkAuthenticated","code","props","useEffect","children","initialState","access","refresh","user","combineReducers","action","setItem","removeItem","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","exact","path","component","Login","ResetPassword","ResetPasswordConfirm","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15a24081.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home = () => (\r\n    <div>\r\n        <p>Home Page</p>\r\n        <p>Click here to login</p>\r\n        <Link to=\"/login\">Login</Link>\r\n    </div>\r\n)\r\n\r\nexport default Home;","export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\r\nexport const LOAD_USER_FAIL = 'LOAD_USER_FAIL';\r\nexport const AUTHENTICATED_SUCCESS = 'AUTHENTICATED_SUCCESS';\r\nexport const AUTHENTICATED_FAIL = 'AUTHENTICATED_FAIL';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const PASSWORD_REST_FAIL = 'PASSWORD_REST_FAIL';\r\nexport const PASSWORD_REST_SUCCESS = 'PASSWORD_REST_SUCCESS';\r\nexport const PASSWORD_REST_CONFIRM_FAIL = 'PASSWORD_REST_CONFIRM_FAIL';\r\nexport const PASSWORD_REST_CONFIRM_SUCCESS = 'PASSWORD_REST_CONFIRM_SUCCESS';","import axios from 'axios';\r\n\r\nimport {\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOAD_USER_SUCCESS,\r\n    LOAD_USER_FAIL,\r\n    AUTHENTICATED_SUCCESS,\r\n    AUTHENTICATED_FAIL,\r\n    LOGOUT,\r\n    PASSWORD_REST_FAIL,\r\n    PASSWORD_REST_SUCCESS,\r\n    PASSWORD_REST_CONFIRM_FAIL,\r\n    PASSWORD_REST_CONFIRM_SUCCESS,\r\n} from './types'\r\n\r\nconst url = 'http://localhost:8000/'\r\n\r\nexport const checkAuthenticated = () => async dispatch => {\r\n    if (localStorage.getItem('access')) {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n\r\n        const body = JSON.stringify({ token: localStorage.getItem('access') });\r\n\r\n        try {\r\n            const res = await axios.post(`${url}auth/jwt/verify`, body, config)\r\n\r\n            if (res.data.code !== 'token_not_valid') {\r\n                dispatch({\r\n                    type: AUTHENTICATED_SUCCESS\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: AUTHENTICATED_FAIL\r\n                })\r\n            }\r\n        } catch (err) {\r\n            dispatch({\r\n                type: AUTHENTICATED_FAIL\r\n            })\r\n        }\r\n\r\n    } else {\r\n        dispatch({\r\n            type: AUTHENTICATED_FAIL\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport const load_user = () => async dispatch => {\r\n    if (localStorage.getItem('access')) {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\r\n                'Accept': 'application/json'\r\n            }\r\n        }\r\n\r\n        try {\r\n            const res = await axios.get(`${url}auth/users/me/`, config)\r\n\r\n            dispatch({\r\n                type: LOAD_USER_SUCCESS,\r\n                payload: res.data\r\n            })\r\n        } catch (err) {\r\n            dispatch({\r\n                type: LOAD_USER_FAIL\r\n            })\r\n        }\r\n    }\r\n    else {\r\n        dispatch({\r\n            type: LOAD_USER_FAIL\r\n        })\r\n    }\r\n\r\n};\r\n\r\nexport const login = (email, password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({ email, password });\r\n\r\n    try {\r\n        const res = await axios.post(`${url}auth/jwt/create/`, body, config)\r\n\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data\r\n        })\r\n\r\n        dispatch(load_user())\r\n    } catch (err) {\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        })\r\n    }\r\n};\r\n\r\nexport const reset_password = (email) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ email });\r\n\r\n    try {\r\n        await axios.post(`http://localhost:8000/auth/users/reset_password/`, body, config)\r\n\r\n        dispatch({\r\n            type: PASSWORD_REST_SUCCESS\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PASSWORD_REST_FAIL\r\n        })\r\n    }\r\n}\r\n\r\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({ uid, token, new_password, re_new_password });\r\n\r\n    try {\r\n        await axios.post(`${url}auth/users/reset_password/reset_password_confirm/`, body, config)\r\n\r\n        dispatch({\r\n            type: PASSWORD_REST_CONFIRM_SUCCESS\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PASSWORD_REST_CONFIRM_FAIL\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = () => dispatch => {\r\n    dispatch({\r\n        type: LOGOUT,\r\n    })\r\n}","import React, { useState } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport { login } from '../actions/auth';\r\n\r\nconst Login = ({ login, isAuthenticated }) => {\r\n\r\n    const [formData, setFormData] = useState({\r\n        email: \"\",\r\n        password: \"\"\r\n    });\r\n\r\n    const { email, password } = formData;\r\n\r\n    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        login(email, password)\r\n\r\n    }\r\n\r\n    if (isAuthenticated) {\r\n        window.location.href = \"/\"\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='container mt-5'>\r\n\r\n                <h1>Sign In</h1>\r\n                <p>Sign into your account</p>\r\n                <form onSubmit={e => onSubmit(e)}>\r\n                    <div className='form-group'>\r\n                        <input\r\n                            className='form-control'\r\n                            type='email'\r\n                            placeholder='email'\r\n                            name='email'\r\n                            value={email}\r\n                            onChange={e => onChange(e)}\r\n                            required\r\n\r\n                        />\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <input\r\n                            className='form-control'\r\n                            type='password'\r\n                            placeholder='password'\r\n                            name='password'\r\n                            value={password}\r\n                            onChange={e => onChange(e)}\r\n                            minLength='6'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <button className='btn btn-primary' type='submit'>Login</button>\r\n                </form>\r\n                <p>Don't have an account? <Link to='/signup'>Sign up</Link></p>\r\n                <p>Forgot your password <Link to='/rest_password'>Reset Password</Link></p>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n\r\n//ctrl + D to select multiple keywords","import React from 'react'\r\n\r\n\r\nconst Signup = () => (\r\n    <div>\r\n        Signup\r\n    </div>\r\n)\r\n\r\nexport default Signup;","import React from 'react'\r\n\r\n\r\nconst Activate = () => (\r\n    <div>\r\n        Activate\r\n    </div>\r\n)\r\n\r\nexport default Activate;","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport { reset_password } from '../actions/auth';\r\n\r\nconst ResetPassword = ({ reset_password }) => {\r\n    const [requestSent, setRequestSent] = useState(false)\r\n    const [formData, setFormData] = useState({\r\n        email: \"\",\r\n    });\r\n\r\n    const { email } = formData;\r\n\r\n    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        reset_password(email);\r\n        setRequestSent(true)\r\n\r\n    }\r\n\r\n    if (requestSent) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='container mt-5'>\r\n                <h1>Request to Rest Password</h1>\r\n                <form onSubmit={e => onSubmit(e)}>\r\n                    <div className='form-group'>\r\n                        <input\r\n                            className='form-control'\r\n                            type='email'\r\n                            placeholder='email'\r\n                            name='email'\r\n                            value={email}\r\n                            onChange={e => onChange(e)}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <button className='btn btn-primary' type='submit'>Reset Password</button>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\n\r\n\r\nexport default connect(null, { reset_password })(ResetPassword);\r\n\r\n//ctrl + D to select multiple keywords","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport { reset_password_confirm } from '../actions/auth';\r\n\r\nconst ResetPasswordConfirm = ({ match, reset_password_confirm }) => {\r\n    const [requestSent, setRequestSent] = useState(false)\r\n    const [formData, setFormData] = useState({\r\n        new_password: \"\",\r\n        re_new_password: \"\"\r\n    });\r\n\r\n    const { new_password, re_new_password } = formData;\r\n\r\n    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        const uid = match.params.uid;\r\n        const token = match.params.token;\r\n\r\n        reset_password_confirm(uid, token, new_password, re_new_password)\r\n        setRequestSent(true)\r\n\r\n    }\r\n\r\n    if (requestSent) {\r\n        return <Redirect to='/' />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='container mt-5'>\r\n\r\n                <h1>Reset Password Confirmation</h1>\r\n                <form onSubmit={e => onSubmit(e)}>\r\n                    <div className='form-group'>\r\n                        <input\r\n                            className='form-control'\r\n                            type='password'\r\n                            placeholder='New Password'\r\n                            name='new_password'\r\n                            value={new_password}\r\n                            onChange={e => onChange(e)}\r\n                            required\r\n\r\n                        />\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <input\r\n                            className='form-control'\r\n                            type='password'\r\n                            placeholder='Confirm New Password'\r\n                            name='re_new_password'\r\n                            value={re_new_password}\r\n                            onChange={e => onChange(e)}\r\n                            minLength='6'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <button className='btn btn-primary' type='submit'>Reset Password</button>\r\n                </form>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default connect(null, { reset_password_confirm })(ResetPasswordConfirm);\r\n\r\n//ctrl + D to select multiple keywords\r\n","import React, { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport { logout } from '../actions/auth';\r\n\r\nconst Navbar = ({ logout, isAuthenticated }) => {\r\n    const guestLinks = () => {\r\n        return (\r\n            <Fragment>\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to='/login'>Login</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to='/signup'>Sign Up</Link>\r\n                </li>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    const authLinks = () => {\r\n        return (\r\n            <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#!\" onClick={logout}>Logout</a>\r\n            </li>\r\n        )\r\n    }\r\n\r\n    const logoutHandler = () => {\r\n        logout()\r\n    }\r\n\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                <ul className=\"navbar-nav\">\r\n                    <li><Link className=\"nav-item nav-link active\" to=\"/\">Home </Link></li>\r\n                    {isAuthenticated ? authLinks() : guestLinks()}\r\n\r\n\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated\r\n})\r\n\r\nexport default connect(mapStateToProps, { logout })(Navbar);","import React, { useEffect } from 'react'\r\nimport Navbar from '../components/NavBar';\r\nimport { connect } from 'react-redux'\r\nimport { checkAuthenticated, load_user } from '../actions/auth';\r\n\r\nconst Layout = (props) => {\r\n    useEffect(() => {\r\n        props.checkAuthenticated();\r\n        props.load_user();\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            {props.children}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default connect(null, { checkAuthenticated, load_user })(Layout);","import {\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOAD_USER_SUCCESS,\r\n    LOAD_USER_FAIL,\r\n    AUTHENTICATED_SUCCESS,\r\n    AUTHENTICATED_FAIL,\r\n    LOGOUT,\r\n    PASSWORD_REST_FAIL,\r\n    PASSWORD_REST_SUCCESS,\r\n    PASSWORD_REST_CONFIRM_FAIL,\r\n    PASSWORD_REST_CONFIRM_SUCCESS,\r\n} from '../actions/types'\r\n\r\nconst initialState = {\r\n    access: localStorage.getItem('access'),\r\n    refresh: localStorage.getItem('refresh'),\r\n    isAuthenticated: null,\r\n    user: null,\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    const { type, payload } = action\r\n\r\n    switch (type) {\r\n        case AUTHENTICATED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: true\r\n            }\r\n        case LOGIN_SUCCESS:\r\n            localStorage.setItem('access', payload.access)\r\n            return {\r\n                ...state,\r\n                isAuthenticated: true,\r\n                access: payload.access,\r\n                refresh: payload.refresh,\r\n            }\r\n        case LOAD_USER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                user: payload\r\n            }\r\n        case AUTHENTICATED_FAIL:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: false\r\n            }\r\n        case LOAD_USER_FAIL:\r\n            return {\r\n                ...state,\r\n                user: null\r\n            }\r\n        case LOGIN_FAIL:\r\n        case LOGOUT:\r\n            localStorage.removeItem('access')\r\n            localStorage.removeItem('refresh')\r\n            return {\r\n                ...state,\r\n                access: null,\r\n                refresh: null,\r\n                isAuthenticated: false,\r\n                user: null,\r\n            }\r\n        case PASSWORD_REST_FAIL:\r\n        case PASSWORD_REST_SUCCESS:\r\n        case PASSWORD_REST_CONFIRM_FAIL:\r\n        case PASSWORD_REST_CONFIRM_SUCCESS:\r\n            return {\r\n                ...state\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport auth from './auth'\r\n\r\nexport default combineReducers({\r\n    auth\r\n})","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n)\r\n\r\nexport default store","import React from 'react';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\n\r\nimport Home from './containers/Home'\r\nimport Login from './containers/Login'\r\nimport Signup from './containers/Signup'\r\nimport Activate from './containers/Activate'\r\nimport ResetPassword from './containers/ResetPassword'\r\nimport ResetPasswordConfirm from './containers/ResetPasswordConfirm'\r\nimport Layout from './hocs/Layout';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nconst App = () => (\r\n    <Provider store={store}>\r\n        <Router>\r\n            <Layout>\r\n                <Switch>\r\n                    <Route exact path='/' component={Home}/>\r\n                    <Route exact path='/login' component={Login}/>\r\n                    <Route exact path='/signup' component={Signup}/>\r\n                    <Route exact path='/rest_password' component={ResetPassword}/>\r\n                    <Route exact path='/password/reset/confirm/:uid/:token' component={ResetPasswordConfirm}/>\r\n                    <Route exact path='/activate/:uid/:token' component={Activate}/>\r\n                    \r\n                </Switch>\r\n            </Layout>\r\n        </Router>\r\n    </Provider>\r\n);\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}